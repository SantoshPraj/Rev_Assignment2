Q7.What is Mutable String in Java Explain with an example



ANSWER:



In Java, strings are immutable, which means their values cannot be changed once they are created. However, there is a mutable string class called `StringBuilder` that allows modification of its content without creating a new object each time. 

Here's an example to illustrate the concept of a mutable string using `StringBuilder`:

```java
StringBuilder mutableString = new StringBuilder("Hello");
mutableString.append(" World!"); // Append additional text
System.out.println(mutableString); // Output: Hello World!

mutableString.insert(6, "Java "); // Insert text at a specific index
System.out.println(mutableString); // Output: Hello Java World!

mutableString.delete(6, 10); // Remove a portion of the string
System.out.println(mutableString); // Output: HelloWorld!

mutableString.reverse(); // Reverse the string
System.out.println(mutableString); // Output: !dlroWolleH
```

In the above example, `StringBuilder` is used to create a mutable string and perform various operations on it:

- The `append()` method is used to add ("append") text to the end of the string.
- The `insert()` method inserts text at a specified index within the string.
- The `delete()` method removes a portion of the string specified by the start and end indexes.
- The `reverse()` method reverses the characters in the string.

Unlike the immutable `String` class, `StringBuilder` allows for efficient manipulation of string content without creating multiple string objects. It provides methods to modify, insert, delete, or reverse characters within the string. This makes `StringBuilder` suitable for scenarios where frequent modifications to a string are required, such as building dynamic strings or performing string manipulations efficiently.
